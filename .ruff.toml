exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".env",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "env",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"
fix = true
extend-include = ["*.ipynb"]


[format]
docstring-code-format = true     # Enable reformatting of code snippets in docstrings.
docstring-code-line-length = 75  # Format all docstring code snippets with a line length of 75
skip-magic-trailing-comma = true

[lint]
dummy-variable-rgx = "^_$" # Only ignore variables named "_"
fixable = ["ALL"]
ignore = [
    "PT017",
    "S101",
    "PD901",
    "F403",
    "ANN002",
    "ANN003",
    "PT011",
    "RET505",
    "S501"
]

# On top of the default `select` (`E`, `F`), enable:
# flake8-bugbear (`B`)
# flake8-quotes (`Q`)
# mccabe (`C90`)
# isort (`I`)
# pep-8-naming (`N`)
# pydocstyle (`D`)
# flake-8-bandit (`S`)
# flake-8-annotations (`ANN`)
# flake-8-comprehensions (`C4`)
# flake8-future-annotations (FA)
# flake8-import-conventions (ICN)
# flake8-logging-format (G)
# flake8-no-pep420 (INP)
# flake8-pie (PIE)
# flake8-print (T20)
# flake8-pyi (PYI)
# flake8-pytest-style (PT)
# flake8-raise (RSE)
# flake8-return (RET)
# flake8-self (SLF)
# flake8-slots (SLOT)
# flake8-simplify (SIM)
# flake8-tidy-imports (TID)
# flake8-unused-arguments (ARG)
# flake8-use-pathlib (PTH)
# flake8-todos (TD)
# flake8-fixme (FIX)
# eradicate (ERA)
# pandas-vet (PD)
# pygrep-hooks (PGH)
# Pylint (PL)
# flynt (FLY)
# NumPy-specific rules (NPY)#
# Perflint (PERF)
# refurb (FURB)
# Ruff-specific rules (RUF)
extend-select = [
    "B",
    "Q",
    "C90",
    "I",
    "N",
    "D",
    "S",
    "ANN",
    "C4",
    "FA",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "ARG",
    "PTH",
    "TD",
    "FIX",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "FLY",
    "NPY",
    "PERF",
    "RUF",
]
extend-fixable = [
    "B",
    "Q",
    "C90",
    "I",
    "N",
    "D",
    "S",
    "ANN",
    "C4",
    "FA",
    "ICN",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "ARG",
    "PTH",
    "TD",
    "FIX",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "FLY",
    "NPY",
    "PERF",
    "RUF",
]
unfixable = ["F401"] # Disable fix for unused imports (`F401`).


[lint.per-file-ignores]
"__init__.py" = ["E402", "I001", "D104"]
"**/{tests,docs,tools}/*" = ["E402","I001","D100", "D103", "ANN201", "PLR2004"]
"*.ipynb" = ["T201", "PLR2004"]

[lint.extend-per-file-ignores]
# Ignore `E402` and `F401` in all `__init__.py` files.
"__init__.py" = ["E402", "F401","I001"]
"**/{tests,docs,tools}/*" = ["E402", "F401","I001"]

[lint.flake8-import-conventions]
# Declare the banned `from` imports. These may be imported using `import`, but not `from`.
# So "from pandas import DataFrame" is banned, but "import pandas as pd" is allowed.
banned-from = [
    "pandas",
    "numpy",
    "matplotlib",
    "polars",
    "polars.selectors",
    "plotly.express",
    "plotly.graph_objects",
]

[lint.flake8-import-conventions.extend-aliases]
"polars" = "pl"               # Allow "pl" as an alias for "polars"
"polars.selectors" = "cs"     # Allow "cs" as an alias for "polars.selectors" -- this follows API conventions in Polars
"plotly.express" = "px"       # Allow "px" as an alias for "plotly.express"
"plotly.graph_objects" = "go" # Allow "go" as an alias for "plotly.graph_objects"

[lint.flake8-pytest-style]
# @pytest.fixture functions should not have parentheses in their names
# (e.g. `@pytest.fixture()` is not allowed).
fixture-parentheses = false

# @pytest.mark.parametrize parameter names should be a comma-separated list
# (e.g. `@pytest.mark.parametrize("a, b", [(1, 2), (3, 4)])` is allowed, but
# `@pytest.mark.parametrize("a b", [(1, 2), (3, 4)])` is not).
parametrize-names-type = "csv"

[lint.pydocstyle]
# Use the numpy docstring convention
convention = "numpy" 

[lint.pylint]
# Maximum number of arguments for functions and methods
max-args = 10 

[lint.isort]
split-on-trailing-comma=false
