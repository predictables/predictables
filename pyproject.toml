[project]
name = "predictables"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "aaweaver-actuary", email = "andrewayersweaver+github@gmail.com" }
]
dependencies = [
    "asttokens==2.4.1",
    "attrs==23.2.0",
    "catboost==1.2.2",
    "cattrs==23.2.3",
    "chardet==5.2.0",
    "click==8.1.7",
    "comm==0.2.1",
    "contourpy==1.2.0",
    "coverage==7.4.4",
    "cycler==0.12.1",
    "debugpy==1.8.1",
    "decorator==5.1.1",
    "et-xmlfile==1.1.0",
    "executing==2.0.1",
    "fastexcel==0.10.1",
    "flake8==7.0.0",
    "fonttools==4.44.0",
    "graphviz==0.20.1",
    "idna==3.4",
    "importlib-metadata==6.8.0",
    "iniconfig==2.0.0",
    "ipykernel==6.26.0",
    "ipython==8.17.2",
    "ipywidgets==8.1.1",
    "isort==5.13.2",
    "jedi==0.19.1",
    "joblib==1.3.2",
    "jupyter_client==8.6.0",
    "jupyter_core==5.5.0",
    "jupyterlab-widgets==3.0.9",
    "kiwisolver==1.4.5",
    "lightgbm==4.3.0",
    "lsprotocol==2023.0.1",
    "lxml==5.1.0",
    "matplotlib==3.8.1",
    "matplotlib-inline==0.1.6",
    "mccabe==0.7.0",
    "mypy==1.9.0",
    "mypy-extensions==1.0.0",
    "nest-asyncio==1.6.0",
    "numpy==1.26.4",
    "openpyxl==3.1.2",
    "packaging==23.2",
    "pandas==2.2.1",
    "pandas-stubs==2.2.0.240218",
    "parso==0.8.3",
    "pathspec==0.12.1",
    "patsy==0.5.6",
    "pexpect==4.9.0",
    "pillow==10.2.0",
    "platformdirs==4.2.0",
    "plotly==5.18.0",
    "pluggy==1.4.0",
    "polars==0.20.23",
    "prompt-toolkit==3.0.43",
    "psutil==5.9.8",
    "ptyprocess==0.7.0",
    "pure-eval==0.2.2",
    "pyaml==23.12.0",
    "pyarrow==15.0.0",
    "pycodestyle==2.11.1",
    "pyflakes==3.2.0",
    "pygls==1.3.0",
    "Pygments==2.17.2",
    "pyparsing==3.1.1",
    "pytest==8.0.0",
    "pytest-cov==4.1.0",
    "pytest-flake8==1.1.1",
    "python-dateutil==2.8.2",
    "python-dotenv==1.0.1",
    "pytz==2024.1",
    "PyYAML==6.0.1",
    "pyzmq==25.1.2",
    "reportlab==4.0.9",
    "scikit-learn==1.3.2",
    "scipy==1.12.0",
    "six==1.16.0",
    "stack-data==0.6.3",
    "statsmodels==0.14.0",
    "tenacity==8.2.3",
    "threadpoolctl==3.3.0",
    "tokenize-rt==5.2.0",
    "tornado==6.4",
    "tqdm==4.66.1",
    "tqdm-stubs==0.2.1",
    "traitlets==5.14.1",
    "types-colorama==0.4.15.20240311",
    "types-decorator==5.1.8.20240310",
    "types-docutils==0.20.0.20240315",
    "types-openpyxl==3.1.0.20240311",
    "types-Pillow==10.2.0.20240311",
    "types-psutil==5.9.5.20240316",
    "types-Pygments==2.17.0.20240310",
    "types-pytz==2024.1.0.20240203",
    "types-setuptools==69.1.0.20240310",
    "types-six==1.16.21.20240311",
    "types-tqdm==4.66.0.20240106",
    "typing_extensions==4.10.0",
    "tzdata==2024.1",
    "wcwidth==0.2.13",
    "widgetsnbextension==4.0.10",
    "xgboost==2.0.3",
    "zipp==3.17.0",
    "wheel>=0.43.0",
    "streamlit>=1.34.0",
    "duckdb>=0.10.2",
    "pygwalker==0.4.8.5",
    "gw-dsl-parser==0.1.48a5",
    "bokeh==2.4.3",
    "streamlit-shap>=1.0.2",
]
readme = "README.md"
requires-python = ">= 3.9"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


# ===================================================================================================
# =========== tools -s================================================================================
# ===================================================================================================

[tool.rye]
managed = true
dev-dependencies = [
    "ruff==0.3.3",
    "ruff-lsp==0.0.53",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["predictables"]

# ===================================================================================================
# =========== ruff -s================================================================================
# ===================================================================================================
[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".env",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "env",
    "node_modules",
    "site-packages",
    "venv",
    "docs/*",
    ".ignore",
    ".ignore/*",
    "_shap.py"
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"
fix = true
extend-include = ["*.ipynb"]


[tool.ruff.format]
docstring-code-format = true     # Enable reformatting of code snippets in docstrings.
docstring-code-line-length = 75  # Format all docstring code snippets with a line length of 75
skip-magic-trailing-comma = true

[tool.ruff.lint]
dummy-variable-rgx = "^_$" # Only ignore variables named "_"
fixable = ["ALL"]
exclude = ["*.ipynb"]
ignore = [
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN204",
    "C901",
    "F403",
    "FIX002",
    "G004",
    "N802",
    "N803",
    "N806",
    "N999",
    "PD901",
    "PGH003",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR2004",
    "PT011",
    "PT017",
    "PT012",
    "RET505",
    "S101",
    "S501",
]

# On top of the default `select` (`E`, `F`), enable:
extend-select = [
    "B",        # flake8-bugbear (`B`)
    "Q",        # flake8-quotes (`Q`)
    "C90",      # mccabe (`C90`)
    "N",        # pep-8-naming (`N`)
    "D",        # pydocstyle (`D`)
    "S",        # flake-8-bandit (`S`)
    "ANN",      # flake-8-annotations (`ANN`)
    "C4",       # flake-8-comprehensions (`C4`)
    "FA",       # flake8-future-annotations (FA)
    "ICN",      # flake8-import-conventions (ICN)
    "G",        # flake8-logging-format (G)
    "INP",      # flake8-no-pep420 (INP)
    "PIE",      # flake8-pie (PIE)
    "T20",      # flake8-print (T20)
    "PYI",      # flake8-pyi (PYI)
    "PT",       # flake8-pytest-style (PT)
    "RSE",      # flake8-raise (RSE)
    "RET",      # flake8-return (RET)
    "SLF",      # flake8-self (SLF)
    "SLOT",     # flake8-slots (SLOT)
    "SIM",      # flake8-simplify (SIM)
    "TID",      # flake8-tidy-imports (TID)
    "ARG",      # flake8-unused-arguments (ARG)
    "PTH",      # flake8-use-pathlib (PTH)
    "TD",       # flake8-todos (TD)
    "FIX",      # flake8-fixme (FIX)
    "ERA",      # eradicate (ERA)
    "PD",       # pandas-vet (PD)
    "PGH",      # pygrep-hooks (PGH)
    "PL",       # Pylint (PL)
    "FLY",      # flynt (FLY)
    "NPY",      # NumPy-specific rules (NPY)
    "PERF",     # Perflint (PERF)
    "RUF",      # Ruff-specific rules (RUF)
]
extend-fixable = [
    "B",        # flake8-bugbear (`B`)
    "Q",        # flake8-quotes (`Q`)
    "C90",      # mccabe (`C90`)
    "N",        # pep-8-naming (`N`)
    "D",        # pydocstyle (`D`)
    "S",        # flake-8-bandit (`S`)
    "ANN",      # flake-8-annotations (`ANN`)
    "C4",       # flake-8-comprehensions (`C4`)
    "FA",       # flake8-future-annotations (FA)
    "ICN",      # flake8-import-conventions (ICN)
    "G",        # flake8-logging-format (G)
    "INP",      # flake8-no-pep420 (INP)
    "PIE",      # flake8-pie (PIE)
    "T20",      # flake8-print (T20)
    "PYI",      # flake8-pyi (PYI)
    "PT",       # flake8-pytest-style (PT)
    "RSE",      # flake8-raise (RSE)
    "RET",      # flake8-return (RET)
    "SLF",      # flake8-self (SLF)
    "SLOT",     # flake8-slots (SLOT)
    "SIM",      # flake8-simplify (SIM)
    "TID",      # flake8-tidy-imports (TID)
    "ARG",      # flake8-unused-arguments (ARG)
    "PTH",      # flake8-use-pathlib (PTH)
    "TD",       # flake8-todos (TD)
    "FIX",      # flake8-fixme (FIX)
    "ERA",      # eradicate (ERA)
    "PD",       # pandas-vet (PD)
    "PGH",      # pygrep-hooks (PGH)
    "PL",       # Pylint (PL)
    "FLY",      # flynt (FLY)
    "NPY",      # NumPy-specific rules (NPY)
    "PERF",     # Perflint (PERF)
    "RUF",      # Ruff-specific rules (RUF)
]
unfixable = ["F401"] # Disable fix for unused imports (`F401`).


[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "I001", "D104"]
"**/{tests,docs,tools}/*" = [
    "E402",
    "I001",
    "D100",
    "D103",
    "ANN001",
    "ANN201",
    "PLR2004",
    "PGH003",
    "INP001",
]
"*.ipynb" = ["T201", "PLR2004", "ERA001"]
"*Univariate_2.py" = ["ERA001"]
"*Model_2.py" = ["ERA001", "PGH003"]
"*_lagged_mean_encoding*" = ["ALL"]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = ["E402", "F401", "I001"]
"**/{tests,docs,tools}/*" = ["E402", "F401", "I001"]

[tool.ruff.lint.flake8-import-conventions]
# Declare the banned `from` imports. These may be imported using `import`, but not `from`.
# So "from pandas import DataFrame" is banned, but "import pandas as pd" is allowed.
banned-from = [
    "pandas",                   # Use `import pandas as pd` instead
    "numpy",                    # Use `import numpy as np` instead
    "matplotlib",               # Use `import matplotlib.pyplot as plt` instead
    "polars",                   # Use `import polars as pl` instead
    "polars.selectors",         # Use `import polars.selectors as cs` instead
    "plotly.express",           # Use `import plotly.express as px` instead
    "plotly.graph_objects",     # Use `import plotly.graph_objects as go` instead
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"polars" = "pl"                 # Allow "pl" as an alias for "polars"
"polars.selectors" = "cs"       # Allow "cs" as an alias for "polars.selectors" -- this follows API conventions in Polars
"plotly.express" = "px"         # Allow "px" as an alias for "plotly.express"
"plotly.graph_objects" = "go"   # Allow "go" as an alias for "plotly.graph_objects"

[tool.ruff.lint.flake8-pytest-style]
# @pytest.fixture functions should not have parentheses in their names
# (e.g. `@pytest.fixture()` is not allowed).
fixture-parentheses = false

# @pytest.mark.parametrize parameter names should be a comma-separated list
# (e.g. `@pytest.mark.parametrize("a, b", [(1, 2), (3, 4)])` is allowed, but
# `@pytest.mark.parametrize("a b", [(1, 2), (3, 4)])` is not).
parametrize-names-type = "csv"

[tool.ruff.lint.pydocstyle]
# Use the numpy docstring convention
convention = "numpy"

[tool.ruff.lint.pylint]
# Maximum number of arguments for functions and methods
max-args = 10

# ===================================================================================================
# =========== mypy -s================================================================================
# ===================================================================================================

[tool.mypy]
warn_unused_configs = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
pretty = true
show_error_codes = true

# ===================================================================================================
# =========== pytest -s==============================================================================
# ===================================================================================================

[tool.pytest.ini_options]
addopts = "--maxfail=3"
log_format = "%(asctime)s %(levelname)s %(message)s"
log_file_format = "%(asctime)s %(levelname)s %(message)s"
python_files = "test_*.py"
python_functions = "test_*"

