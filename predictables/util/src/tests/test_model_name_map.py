import pytest  # type: ignore
from predictables.util.src._model_name_map import model_name_map  # type: ignore


@pytest.fixture(
    params=[
        "catboost",
        "cb",
        "cat",
        "random_forest",
        "randomforest",
        "rf",
        "elastic_net",
        "elasticnet",
        "en",
        "elastic",
        "lr",
        "linear_regression",
        "linearregression",
        "linear",
        "logistic_regression",
        "logisticregression",
        "logistic",
        "logit",
        "logit_regression",
        "logitregression",
        "linreg",
        "logreg",
        "svm",
        "svc",
        "support_vector_machine",
        "supportvectormachine",
        "support_vector_classifier",
        "supportvectorclassifier",
        "support_vector_regression",
        "supportvectorregression",
        "support_vector_regressor",
        "supportvectorregressor",
        "svr",
        "svcr",
        "svre",
        "svreg",
        "sv",
        "lightgbm",
        "lgb",
        "light_gradient_boosting_machine",
        "lightgradientboostingmachine",
        "light_gbm",
        "xgboost",
        "xgb",
        "extreme_gradient_boosting",
        "extremegradientboosting",
        "extreme_gradient_boost",
        "extremegradientboost",
        "extreme_gbm",
        "extremegbm",
        "xg",
    ]
)
def model_name(request):
    return request.param


def test_model_name_map(model_name):
    expected_map = {
        "catboost": "catboost",
        "cb": "catboost",
        "cat": "catboost",
        "random_forest": "random_forest",
        "randomforest": "random_forest",
        "rf": "random_forest",
        "elastic_net": "elastic_net",
        "elasticnet": "elastic_net",
        "en": "elastic_net",
        "elastic": "elastic_net",
        "lr": "elastic_net",
        "linear_regression": "elastic_net",
        "linearregression": "elastic_net",
        "linear": "elastic_net",
        "logistic_regression": "elastic_net",
        "logisticregression": "elastic_net",
        "logistic": "elastic_net",
        "logit": "elastic_net",
        "logit_regression": "elastic_net",
        "logitregression": "elastic_net",
        "linreg": "elastic_net",
        "logreg": "elastic_net",
        "svm": "svm",
        "svc": "svm",
        "support_vector_machine": "svm",
        "supportvectormachine": "svm",
        "support_vector_classifier": "svm",
        "supportvectorclassifier": "svm",
        "support_vector_regression": "svm",
        "supportvectorregression": "svm",
        "support_vector_regressor": "svm",
        "supportvectorregressor": "svm",
        "svr": "svm",
        "svcr": "svm",
        "svre": "svm",
        "svreg": "svm",
        "sv": "svm",
        "lightgbm": "lightgbm",
        "lgb": "lightgbm",
        "light_gradient_boosting_machine": "lightgbm",
        "lightgradientboostingmachine": "lightgbm",
        "light_gbm": "lightgbm",
        "xgboost": "xgboost",
        "xgb": "xgboost",
        "extreme_gradient_boosting": "xgboost",
        "extremegradientboosting": "xgboost",
        "extreme_gradient_boost": "xgboost",
        "extremegradientboost": "xgboost",
        "extreme_gbm": "xgboost",
        "extremegbm": "xgboost",
        "xg": "xgboost",
    }
    assert model_name_map(model_name) == expected_map[model_name]


def test_model_name_map_invalid():
    with pytest.raises(ValueError):
        model_name_map("invalid_model_name")
