from .. import get_config as get_config
from ..exceptions import UnsetMetadataPassedError as UnsetMetadataPassedError
from ._bunch import Bunch as Bunch
from typing import Any, NamedTuple

METHODS: Any
UNUSED: str
WARN: str
UNCHANGED: str
VALID_REQUEST_VALUES: Any

def request_is_alias(item): ...
def request_is_valid(item): ...

class MethodMetadataRequest:
    owner: Any
    method: Any
    def __init__(self, owner, method) -> None: ...
    @property
    def requests(self): ...
    def add_request(self, *, param, alias): ...

class MetadataRequest:
    def __init__(self, owner) -> None: ...

class RouterMappingPair(NamedTuple):
    mapping: Any
    router: Any

class MethodPair(NamedTuple):
    callee: Any
    caller: Any

class MethodMapping:
    def __init__(self) -> None: ...
    def __iter__(self): ...
    def add(self, *, callee, caller): ...
    @classmethod
    def from_str(cls, route): ...

class MetadataRouter:
    owner: Any
    def __init__(self, owner) -> None: ...
    def add_self_request(self, obj): ...
    def add(self, *, method_mapping, **objs): ...
    def route_params(self, *, caller, params): ...
    def validate_metadata(self, *, method, params) -> None: ...
    def __iter__(self): ...

def get_routing_for_object(obj: Any | None = ...): ...

REQUESTER_DOC: str
REQUESTER_DOC_PARAM: str
REQUESTER_DOC_RETURN: str

class RequestMethod:
    name: Any
    keys: Any
    validate_keys: Any
    def __init__(self, name, keys, validate_keys: bool = ...) -> None: ...
    def __get__(self, instance, owner): ...

class _MetadataRequester:
    def __init_subclass__(cls, **kwargs) -> None: ...
    def get_metadata_routing(self): ...

def process_routing(obj, method, other_params, **kwargs): ...
