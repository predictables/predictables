from .._config import config_context as config_context, get_config as get_config
from abc import ABC, abstractmethod
from numbers import Real
from typing import Any

class InvalidParameterError(ValueError, TypeError): ...

def validate_parameter_constraints(
    parameter_constraints, params, caller_name
) -> None: ...
def make_constraint(constraint): ...
def validate_params(parameter_constraints, *, prefer_skip_nested_validation): ...

class RealNotInt(Real): ...

class _Constraint(ABC):
    hidden: bool
    def __init__(self) -> None: ...
    @abstractmethod
    def is_satisfied_by(self, val): ...

class _InstancesOf(_Constraint):
    type: Any
    def __init__(self, type) -> None: ...
    def is_satisfied_by(self, val): ...

class _NoneConstraint(_Constraint):
    def is_satisfied_by(self, val): ...

class _NanConstraint(_Constraint):
    def is_satisfied_by(self, val): ...

class _PandasNAConstraint(_Constraint):
    def is_satisfied_by(self, val): ...

class Options(_Constraint):
    type: Any
    options: Any
    deprecated: Any
    def __init__(self, type, options, *, deprecated: Any | None = ...) -> None: ...
    def is_satisfied_by(self, val): ...

class StrOptions(Options):
    def __init__(self, options, *, deprecated: Any | None = ...) -> None: ...

class Interval(_Constraint):
    type: Any
    left: Any
    right: Any
    closed: Any
    def __init__(self, type, left, right, *, closed) -> None: ...
    def __contains__(self, val): ...
    def is_satisfied_by(self, val): ...

class _ArrayLikes(_Constraint):
    def is_satisfied_by(self, val): ...

class _SparseMatrices(_Constraint):
    def is_satisfied_by(self, val): ...

class _Callables(_Constraint):
    def is_satisfied_by(self, val): ...

class _RandomStates(_Constraint):
    def __init__(self) -> None: ...
    def is_satisfied_by(self, val): ...

class _Booleans(_Constraint):
    def __init__(self) -> None: ...
    def is_satisfied_by(self, val): ...

class _VerboseHelper(_Constraint):
    def __init__(self) -> None: ...
    def is_satisfied_by(self, val): ...

class MissingValues(_Constraint):
    numeric_only: Any
    def __init__(self, numeric_only: bool = ...) -> None: ...
    def is_satisfied_by(self, val): ...

class HasMethods(_Constraint):
    methods: Any
    def __init__(self, methods) -> None: ...
    def is_satisfied_by(self, val): ...

class _IterablesNotString(_Constraint):
    def is_satisfied_by(self, val): ...

class _CVObjects(_Constraint):
    def __init__(self) -> None: ...
    def is_satisfied_by(self, val): ...

class Hidden:
    constraint: Any
    def __init__(self, constraint) -> None: ...

def generate_invalid_param_val(constraint): ...
def generate_valid_param(constraint): ...
