import contextlib
from numpy.testing import (
    assert_almost_equal as assert_almost_equal,
    assert_approx_equal as assert_approx_equal,
    assert_array_almost_equal as assert_array_almost_equal,
    assert_array_equal as assert_array_equal,
    assert_array_less as assert_array_less,
    assert_no_warnings as assert_no_warnings,
)
from typing import Any

assert_raises: Any
SkipTest: Any
assert_raises_regexp = assert_raises_regex

class _IgnoreWarnings:
    log: Any
    category: Any
    def __init__(self, category) -> None: ...
    def __call__(self, fn): ...
    def __enter__(self) -> None: ...
    def __exit__(self, *exc_info) -> None: ...

def assert_allclose(
    actual,
    desired,
    rtol: Any | None = ...,
    atol: float = ...,
    equal_nan: bool = ...,
    err_msg: str = ...,
    verbose: bool = ...,
) -> None: ...

class TempMemmap:
    mmap_mode: Any
    data: Any
    def __init__(self, data, mmap_mode: str = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

def assert_run_python_script(source_code, timeout: int = ...) -> None: ...

class _Raises(contextlib.AbstractContextManager):
    expected_exc_types: Any
    matches: Any
    may_pass: Any
    err_msg: Any
    raised_and_matched: bool
    def __init__(self, expected_exc_type, match, may_pass, err_msg) -> None: ...
    def __exit__(self, exc_type, exc_value, _): ...

class MinimalClassifier:
    param: Any
    def __init__(self, param: Any | None = ...) -> None: ...
    def get_params(self, deep: bool = ...): ...
    def set_params(self, **params): ...
    def fit(self, X, y): ...
    def predict_proba(self, X): ...
    def predict(self, X): ...
    def score(self, X, y): ...

class MinimalRegressor:
    param: Any
    def __init__(self, param: Any | None = ...) -> None: ...
    def get_params(self, deep: bool = ...): ...
    def set_params(self, **params): ...
    is_fitted_: bool
    def fit(self, X, y): ...
    def predict(self, X): ...
    def score(self, X, y): ...

class MinimalTransformer:
    param: Any
    def __init__(self, param: Any | None = ...) -> None: ...
    def get_params(self, deep: bool = ...): ...
    def set_params(self, **params): ...
    is_fitted_: bool
    def fit(self, X, y: Any | None = ...): ...
    def transform(self, X, y: Any | None = ...): ...
    def fit_transform(self, X, y: Any | None = ...): ...
