from typing import Any, ClassVar

from typing import overload
import numpy
import numpy.dtypes
import scipy.sparse._csr
import scipy.sparse._matrix

NODE_DTYPE: numpy.dtypes.VoidDType
TREE_LEAF: int
TREE_UNDEFINED: int
issparse: function

class BestFirstTreeBuilder(TreeBuilder):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def build(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class DOUBLE(numpy.floating, float):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @overload
    def as_integer_ratio(self) -> Any: ...
    @overload
    def as_integer_ratio() -> Any: ...
    @overload
    def as_integer_ratio() -> Any: ...
    @overload
    def is_integer(self) -> bool: ...
    @overload
    def is_integer() -> Any: ...
    @overload
    def is_integer() -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    @classmethod
    def __class_getitem__(cls, *args, **kwargs) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class DTYPE(numpy.floating):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @overload
    def as_integer_ratio(self) -> Any: ...
    @overload
    def as_integer_ratio() -> Any: ...
    @overload
    def as_integer_ratio() -> Any: ...
    @overload
    def is_integer(self) -> bool: ...
    @overload
    def is_integer() -> Any: ...
    @overload
    def is_integer() -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    @classmethod
    def __class_getitem__(cls, *args, **kwargs) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class DepthFirstTreeBuilder(TreeBuilder):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def build(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Tree:
    capacity: ClassVar[getset_descriptor] = ...
    children_left: ClassVar[getset_descriptor] = ...
    children_right: ClassVar[getset_descriptor] = ...
    feature: ClassVar[getset_descriptor] = ...
    impurity: ClassVar[getset_descriptor] = ...
    max_depth: ClassVar[getset_descriptor] = ...
    max_n_classes: ClassVar[getset_descriptor] = ...
    missing_go_to_left: ClassVar[getset_descriptor] = ...
    n_classes: ClassVar[getset_descriptor] = ...
    n_features: ClassVar[getset_descriptor] = ...
    n_leaves: ClassVar[getset_descriptor] = ...
    n_node_samples: ClassVar[getset_descriptor] = ...
    n_outputs: ClassVar[getset_descriptor] = ...
    node_count: ClassVar[getset_descriptor] = ...
    threshold: ClassVar[getset_descriptor] = ...
    value: ClassVar[getset_descriptor] = ...
    weighted_n_node_samples: ClassVar[getset_descriptor] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def apply(self, *args, **kwargs) -> Any: ...
    def compute_feature_importances(self, *args, **kwargs) -> Any: ...
    def compute_node_depths(self, *args, **kwargs) -> Any: ...
    def compute_partial_dependence(self, *args, **kwargs) -> Any: ...
    def decision_path(self, *args, **kwargs) -> Any: ...
    def predict(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TreeBuilder:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def build(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _AlphaPruner(_CCPPruneController):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _CCPPruneController:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _PathFinder(_CCPPruneController):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class csr_matrix(scipy.sparse._matrix.spmatrix, scipy.sparse._csr._csr_base): ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def __pyx_unpickle_TreeBuilder(*args, **kwargs) -> Any: ...
def __pyx_unpickle__CCPPruneController(*args, **kwargs) -> Any: ...
def _all_compatible_dtype_dicts(*args, **kwargs) -> Any: ...
def _build_pruned_tree_ccp(*args, **kwargs) -> Any: ...
def _check_n_classes(*args, **kwargs) -> Any: ...
def _check_node_ndarray(*args, **kwargs) -> Any: ...
def _check_value_ndarray(*args, **kwargs) -> Any: ...
def _dtype_dict_with_modified_bitness(*args, **kwargs) -> Any: ...
def _dtype_to_dict(*args, **kwargs) -> Any: ...
def ccp_pruning_path(*args, **kwargs) -> Any: ...
