from ..utils.extmath import softmax as softmax
from abc import ABC, abstractmethod
from typing import Any

class Interval:
    low: float
    high: float
    low_inclusive: bool
    high_inclusive: bool
    def __post_init__(self) -> None: ...
    def includes(self, x): ...

class BaseLink(ABC):
    is_multiclass: bool
    interval_y_pred: Any
    @abstractmethod
    def link(self, y_pred, out: Any | None = ...): ...
    @abstractmethod
    def inverse(self, raw_prediction, out: Any | None = ...): ...

class IdentityLink(BaseLink):
    def link(self, y_pred, out: Any | None = ...): ...
    inverse: Any

class LogLink(BaseLink):
    interval_y_pred: Any
    def link(self, y_pred, out: Any | None = ...): ...
    def inverse(self, raw_prediction, out: Any | None = ...): ...

class LogitLink(BaseLink):
    interval_y_pred: Any
    def link(self, y_pred, out: Any | None = ...): ...
    def inverse(self, raw_prediction, out: Any | None = ...): ...

class HalfLogitLink(BaseLink):
    interval_y_pred: Any
    def link(self, y_pred, out: Any | None = ...): ...
    def inverse(self, raw_prediction, out: Any | None = ...): ...

class MultinomialLogit(BaseLink):
    is_multiclass: bool
    interval_y_pred: Any
    def symmetrize_raw_prediction(self, raw_prediction): ...
    def link(self, y_pred, out: Any | None = ...): ...
    def inverse(self, raw_prediction, out: Any | None = ...): ...
