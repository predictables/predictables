from typing import Any, ClassVar

from typing import overload
import enum
import importlib._bootstrap
import sklearn.metrics._pairwise_distances_reduction._argkmin

callable: importlib._bootstrap.WeightingStrategy
distance: importlib._bootstrap.WeightingStrategy
issparse: function
threadpool_limits: function
uniform: importlib._bootstrap.WeightingStrategy

class ArgKminClassMode32(
    sklearn.metrics._pairwise_distances_reduction._argkmin.ArgKmin32
):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _finalize_results(self, *args, **kwargs) -> Any: ...
    @classmethod
    def compute(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ArgKminClassMode64(
    sklearn.metrics._pairwise_distances_reduction._argkmin.ArgKmin64
):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _finalize_results(self, *args, **kwargs) -> Any: ...
    @classmethod
    def compute(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class WeightingStrategy(enum.IntEnum):
    class _member_type_:
        denominator: ClassVar[getset_descriptor] = ...
        imag: ClassVar[getset_descriptor] = ...
        numerator: ClassVar[getset_descriptor] = ...
        real: ClassVar[getset_descriptor] = ...
        @classmethod
        def __init__(cls, *args, **kwargs) -> None: ...
        @overload
        def as_integer_ratio(self) -> Any: ...
        @overload
        def as_integer_ratio() -> Any: ...
        @overload
        def as_integer_ratio() -> Any: ...
        def bit_count(self) -> Any: ...
        def bit_length(self) -> Any: ...
        def conjugate(self, *args, **kwargs) -> Any: ...
        @classmethod
        def from_bytes(cls, *args, **kwargs) -> Any: ...
        def to_bytes(self, *args, **kwargs) -> Any: ...
        def __abs__(self) -> Any: ...
        def __add__(self, other) -> Any: ...
        def __and__(self, other) -> Any: ...
        def __bool__(self) -> Any: ...
        def __ceil__(self, *args, **kwargs) -> Any: ...
        def __divmod__(self, other) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __float__(self) -> Any: ...
        def __floor__(self, *args, **kwargs) -> Any: ...
        def __floordiv__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __getnewargs__(self, *args, **kwargs) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        def __index__(self) -> Any: ...
        def __int__(self) -> Any: ...
        def __invert__(self) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lshift__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __mod__(self, other) -> Any: ...
        def __mul__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __neg__(self) -> Any: ...
        def __or__(self, other) -> Any: ...
        def __pos__(self) -> Any: ...
        def __pow__(self, other) -> Any: ...
        def __radd__(self, other) -> Any: ...
        def __rand__(self, other) -> Any: ...
        def __rdivmod__(self, other) -> Any: ...
        def __rfloordiv__(self, other) -> Any: ...
        def __rlshift__(self, other) -> Any: ...
        def __rmod__(self, other) -> Any: ...
        def __rmul__(self, other) -> Any: ...
        def __ror__(self, other) -> Any: ...
        def __round__(self) -> Any: ...
        def __rpow__(self, other) -> Any: ...
        def __rrshift__(self, other) -> Any: ...
        def __rshift__(self, other) -> Any: ...
        def __rsub__(self, other) -> Any: ...
        def __rtruediv__(self, other) -> Any: ...
        def __rxor__(self, other) -> Any: ...
        def __sizeof__(self) -> Any: ...
        def __sub__(self, other) -> Any: ...
        def __truediv__(self, other) -> Any: ...
        def __trunc__(self) -> Any: ...
        def __xor__(self, other) -> Any: ...

    __new__: ClassVar[function] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    callable: ClassVar[importlib._bootstrap.WeightingStrategy] = ...
    distance: ClassVar[importlib._bootstrap.WeightingStrategy] = ...
    uniform: ClassVar[importlib._bootstrap.WeightingStrategy] = ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def __pyx_unpickle___Pyx_EnumMeta(*args, **kwargs) -> Any: ...
