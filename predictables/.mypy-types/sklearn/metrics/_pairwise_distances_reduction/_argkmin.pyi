from typing import Any, ClassVar

import _abc
import numbers
import sklearn.metrics._pairwise_distances_reduction._base

_in_unstable_openblas_configuration: function
check_array: function
check_scalar: function
issparse: function
threadpool_limits: function

class ArgKmin32(
    sklearn.metrics._pairwise_distances_reduction._base.BaseDistancesReduction32
):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _finalize_results(self, *args, **kwargs) -> Any: ...
    @classmethod
    def compute(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ArgKmin64(
    sklearn.metrics._pairwise_distances_reduction._base.BaseDistancesReduction64
):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _finalize_results(self, *args, **kwargs) -> Any: ...
    @classmethod
    def compute(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class EuclideanArgKmin32(ArgKmin32):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def is_usable_for(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class EuclideanArgKmin64(ArgKmin64):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def is_usable_for(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Integral(numbers.Rational):
    _abc_impl: ClassVar[_abc._abc_data] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __and__: ClassVar[function] = ...
    __float__: ClassVar[function] = ...
    __index__: ClassVar[function] = ...
    __int__: ClassVar[function] = ...
    __invert__: ClassVar[function] = ...
    __lshift__: ClassVar[function] = ...
    __or__: ClassVar[function] = ...
    __pow__: ClassVar[function] = ...
    __rand__: ClassVar[function] = ...
    __rlshift__: ClassVar[function] = ...
    __ror__: ClassVar[function] = ...
    __rrshift__: ClassVar[function] = ...
    __rshift__: ClassVar[function] = ...
    __rxor__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    __xor__: ClassVar[function] = ...
    @property
    def denominator(self) -> Any: ...
    @property
    def numerator(self) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
