from typing import Any, ClassVar

import _abc
import numbers

check_scalar: function
get_config: function
issparse: function

class BaseDistancesReduction32:
    datasets_pair: ClassVar[getset_descriptor] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _finalize_results(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BaseDistancesReduction64:
    datasets_pair: ClassVar[getset_descriptor] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _finalize_results(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Integral(numbers.Rational):
    _abc_impl: ClassVar[_abc._abc_data] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __and__: ClassVar[function] = ...
    __float__: ClassVar[function] = ...
    __index__: ClassVar[function] = ...
    __int__: ClassVar[function] = ...
    __invert__: ClassVar[function] = ...
    __lshift__: ClassVar[function] = ...
    __or__: ClassVar[function] = ...
    __pow__: ClassVar[function] = ...
    __rand__: ClassVar[function] = ...
    __rlshift__: ClassVar[function] = ...
    __ror__: ClassVar[function] = ...
    __rrshift__: ClassVar[function] = ...
    __rshift__: ClassVar[function] = ...
    __rxor__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    __xor__: ClassVar[function] = ...
    @property
    def denominator(self) -> Any: ...
    @property
    def numerator(self) -> Any: ...

def __pyx_unpickle_BaseDistancesReduction32(*args, **kwargs) -> Any: ...
def __pyx_unpickle_BaseDistancesReduction64(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def _openmp_effective_n_threads(*args, **kwargs) -> Any: ...
def _sqeuclidean_row_norms32(*args, **kwargs) -> Any: ...
def _sqeuclidean_row_norms64(*args, **kwargs) -> Any: ...
