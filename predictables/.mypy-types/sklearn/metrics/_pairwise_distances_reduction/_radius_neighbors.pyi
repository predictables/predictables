from typing import Any, ClassVar

import _abc
import numbers
import sklearn.metrics._pairwise_distances_reduction._base

_in_unstable_openblas_configuration: function
check_array: function
check_scalar: function
issparse: function
threadpool_limits: function

class EuclideanRadiusNeighbors32(RadiusNeighbors32):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def is_usable_for(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class EuclideanRadiusNeighbors64(RadiusNeighbors64):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def is_usable_for(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RadiusNeighbors32(
    sklearn.metrics._pairwise_distances_reduction._base.BaseDistancesReduction32
):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _finalize_results(self, *args, **kwargs) -> Any: ...
    @classmethod
    def compute(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RadiusNeighbors64(
    sklearn.metrics._pairwise_distances_reduction._base.BaseDistancesReduction64
):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _finalize_results(self, *args, **kwargs) -> Any: ...
    @classmethod
    def compute(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Real(numbers.Complex):
    _abc_impl: ClassVar[_abc._abc_data] = ...
    conjugate: ClassVar[function] = ...
    __abstractmethods__: ClassVar[frozenset] = ...
    __ceil__: ClassVar[function] = ...
    __complex__: ClassVar[function] = ...
    __divmod__: ClassVar[function] = ...
    __float__: ClassVar[function] = ...
    __floor__: ClassVar[function] = ...
    __floordiv__: ClassVar[function] = ...
    __le__: ClassVar[function] = ...
    __lt__: ClassVar[function] = ...
    __mod__: ClassVar[function] = ...
    __rdivmod__: ClassVar[function] = ...
    __rfloordiv__: ClassVar[function] = ...
    __rmod__: ClassVar[function] = ...
    __round__: ClassVar[function] = ...
    __slots__: ClassVar[tuple] = ...
    __trunc__: ClassVar[function] = ...
    @property
    def imag(self) -> Any: ...
    @property
    def real(self) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
