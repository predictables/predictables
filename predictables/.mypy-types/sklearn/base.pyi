from ._config import config_context as config_context, get_config as get_config
from .exceptions import InconsistentVersionWarning as InconsistentVersionWarning
from .utils._estimator_html_repr import estimator_html_repr as estimator_html_repr
from .utils._metadata_requests import _MetadataRequester
from .utils._param_validation import (
    validate_parameter_constraints as validate_parameter_constraints,
)
from .utils._set_output import _SetOutputMixin
from .utils.validation import (
    check_X_y as check_X_y,
    check_array as check_array,
    check_is_fitted as check_is_fitted,
)
from typing import Any

def clone(estimator, *, safe: bool = ...): ...

class BaseEstimator(_MetadataRequester):
    def get_params(self, deep: bool = ...): ...
    def set_params(self, **params): ...
    def __sklearn_clone__(self): ...

class ClassifierMixin:
    def score(self, X, y, sample_weight: Any | None = ...): ...

class RegressorMixin:
    def score(self, X, y, sample_weight: Any | None = ...): ...

class ClusterMixin:
    def fit_predict(self, X, y: Any | None = ...): ...

class BiclusterMixin:
    @property
    def biclusters_(self): ...
    def get_indices(self, i): ...
    def get_shape(self, i): ...
    def get_submatrix(self, i, data): ...

class TransformerMixin(_SetOutputMixin):
    def fit_transform(self, X, y: Any | None = ..., **fit_params): ...

class OneToOneFeatureMixin:
    def get_feature_names_out(self, input_features: Any | None = ...): ...

class ClassNamePrefixFeaturesOutMixin:
    def get_feature_names_out(self, input_features: Any | None = ...): ...

class DensityMixin:
    def score(self, X, y: Any | None = ...) -> None: ...

class OutlierMixin:
    def fit_predict(self, X, y: Any | None = ...): ...

class MetaEstimatorMixin: ...
class MultiOutputMixin: ...
class _UnstableArchMixin: ...

def is_classifier(estimator): ...
def is_regressor(estimator): ...
def is_outlier_detector(estimator): ...
