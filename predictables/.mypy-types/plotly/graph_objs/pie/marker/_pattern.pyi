from plotly.basedatatypes import BaseTraceHierarchyType as _BaseTraceHierarchyType
from typing import Any

class Pattern(_BaseTraceHierarchyType):
    @property
    def bgcolor(self): ...
    @bgcolor.setter
    def bgcolor(self, val) -> None: ...
    @property
    def bgcolorsrc(self): ...
    @bgcolorsrc.setter
    def bgcolorsrc(self, val) -> None: ...
    @property
    def fgcolor(self): ...
    @fgcolor.setter
    def fgcolor(self, val) -> None: ...
    @property
    def fgcolorsrc(self): ...
    @fgcolorsrc.setter
    def fgcolorsrc(self, val) -> None: ...
    @property
    def fgopacity(self): ...
    @fgopacity.setter
    def fgopacity(self, val) -> None: ...
    @property
    def fillmode(self): ...
    @fillmode.setter
    def fillmode(self, val) -> None: ...
    @property
    def shape(self): ...
    @shape.setter
    def shape(self, val) -> None: ...
    @property
    def shapesrc(self): ...
    @shapesrc.setter
    def shapesrc(self, val) -> None: ...
    @property
    def size(self): ...
    @size.setter
    def size(self, val) -> None: ...
    @property
    def sizesrc(self): ...
    @sizesrc.setter
    def sizesrc(self, val) -> None: ...
    @property
    def solidity(self): ...
    @solidity.setter
    def solidity(self, val) -> None: ...
    @property
    def soliditysrc(self): ...
    @soliditysrc.setter
    def soliditysrc(self, val) -> None: ...
    def __init__(
        self,
        arg: Any | None = ...,
        bgcolor: Any | None = ...,
        bgcolorsrc: Any | None = ...,
        fgcolor: Any | None = ...,
        fgcolorsrc: Any | None = ...,
        fgopacity: Any | None = ...,
        fillmode: Any | None = ...,
        shape: Any | None = ...,
        shapesrc: Any | None = ...,
        size: Any | None = ...,
        sizesrc: Any | None = ...,
        solidity: Any | None = ...,
        soliditysrc: Any | None = ...,
        **kwargs
    ) -> None: ...
