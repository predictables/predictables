from plotly.basedatatypes import BaseTraceHierarchyType as _BaseTraceHierarchyType
from typing import Any

class ErrorZ(_BaseTraceHierarchyType):
    @property
    def array(self): ...
    @array.setter
    def array(self, val) -> None: ...
    @property
    def arrayminus(self): ...
    @arrayminus.setter
    def arrayminus(self, val) -> None: ...
    @property
    def arrayminussrc(self): ...
    @arrayminussrc.setter
    def arrayminussrc(self, val) -> None: ...
    @property
    def arraysrc(self): ...
    @arraysrc.setter
    def arraysrc(self, val) -> None: ...
    @property
    def color(self): ...
    @color.setter
    def color(self, val) -> None: ...
    @property
    def symmetric(self): ...
    @symmetric.setter
    def symmetric(self, val) -> None: ...
    @property
    def thickness(self): ...
    @thickness.setter
    def thickness(self, val) -> None: ...
    @property
    def traceref(self): ...
    @traceref.setter
    def traceref(self, val) -> None: ...
    @property
    def tracerefminus(self): ...
    @tracerefminus.setter
    def tracerefminus(self, val) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, val) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, val) -> None: ...
    @property
    def valueminus(self): ...
    @valueminus.setter
    def valueminus(self, val) -> None: ...
    @property
    def visible(self): ...
    @visible.setter
    def visible(self, val) -> None: ...
    @property
    def width(self): ...
    @width.setter
    def width(self, val) -> None: ...
    def __init__(
        self,
        arg: Any | None = ...,
        array: Any | None = ...,
        arrayminus: Any | None = ...,
        arrayminussrc: Any | None = ...,
        arraysrc: Any | None = ...,
        color: Any | None = ...,
        symmetric: Any | None = ...,
        thickness: Any | None = ...,
        traceref: Any | None = ...,
        tracerefminus: Any | None = ...,
        type: Any | None = ...,
        value: Any | None = ...,
        valueminus: Any | None = ...,
        visible: Any | None = ...,
        width: Any | None = ...,
        **kwargs
    ) -> None: ...
