from plotly.basedatatypes import BaseTraceType as _BaseTraceType
from typing import Any

class Parcoords(_BaseTraceType):
    @property
    def customdata(self): ...
    @customdata.setter
    def customdata(self, val) -> None: ...
    @property
    def customdatasrc(self): ...
    @customdatasrc.setter
    def customdatasrc(self, val) -> None: ...
    @property
    def dimensions(self): ...
    @dimensions.setter
    def dimensions(self, val) -> None: ...
    @property
    def dimensiondefaults(self): ...
    @dimensiondefaults.setter
    def dimensiondefaults(self, val) -> None: ...
    @property
    def domain(self): ...
    @domain.setter
    def domain(self, val) -> None: ...
    @property
    def ids(self): ...
    @ids.setter
    def ids(self, val) -> None: ...
    @property
    def idssrc(self): ...
    @idssrc.setter
    def idssrc(self, val) -> None: ...
    @property
    def labelangle(self): ...
    @labelangle.setter
    def labelangle(self, val) -> None: ...
    @property
    def labelfont(self): ...
    @labelfont.setter
    def labelfont(self, val) -> None: ...
    @property
    def labelside(self): ...
    @labelside.setter
    def labelside(self, val) -> None: ...
    @property
    def legend(self): ...
    @legend.setter
    def legend(self, val) -> None: ...
    @property
    def legendgrouptitle(self): ...
    @legendgrouptitle.setter
    def legendgrouptitle(self, val) -> None: ...
    @property
    def legendrank(self): ...
    @legendrank.setter
    def legendrank(self, val) -> None: ...
    @property
    def legendwidth(self): ...
    @legendwidth.setter
    def legendwidth(self, val) -> None: ...
    @property
    def line(self): ...
    @line.setter
    def line(self, val) -> None: ...
    @property
    def meta(self): ...
    @meta.setter
    def meta(self, val) -> None: ...
    @property
    def metasrc(self): ...
    @metasrc.setter
    def metasrc(self, val) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, val) -> None: ...
    @property
    def rangefont(self): ...
    @rangefont.setter
    def rangefont(self, val) -> None: ...
    @property
    def stream(self): ...
    @stream.setter
    def stream(self, val) -> None: ...
    @property
    def tickfont(self): ...
    @tickfont.setter
    def tickfont(self, val) -> None: ...
    @property
    def uid(self): ...
    @uid.setter
    def uid(self, val) -> None: ...
    @property
    def uirevision(self): ...
    @uirevision.setter
    def uirevision(self, val) -> None: ...
    @property
    def unselected(self): ...
    @unselected.setter
    def unselected(self, val) -> None: ...
    @property
    def visible(self): ...
    @visible.setter
    def visible(self, val) -> None: ...
    @property
    def type(self): ...
    def __init__(
        self,
        arg: Any | None = ...,
        customdata: Any | None = ...,
        customdatasrc: Any | None = ...,
        dimensions: Any | None = ...,
        dimensiondefaults: Any | None = ...,
        domain: Any | None = ...,
        ids: Any | None = ...,
        idssrc: Any | None = ...,
        labelangle: Any | None = ...,
        labelfont: Any | None = ...,
        labelside: Any | None = ...,
        legend: Any | None = ...,
        legendgrouptitle: Any | None = ...,
        legendrank: Any | None = ...,
        legendwidth: Any | None = ...,
        line: Any | None = ...,
        meta: Any | None = ...,
        metasrc: Any | None = ...,
        name: Any | None = ...,
        rangefont: Any | None = ...,
        stream: Any | None = ...,
        tickfont: Any | None = ...,
        uid: Any | None = ...,
        uirevision: Any | None = ...,
        unselected: Any | None = ...,
        visible: Any | None = ...,
        **kwargs
    ) -> None: ...
