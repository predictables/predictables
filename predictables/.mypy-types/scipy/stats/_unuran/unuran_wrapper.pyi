from typing import Any, ClassVar

from typing import overload
import _collections

argsreduce: function
check_random_state: function
namedtuple: function

class DiscreteAliasUrn(Method):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class DiscreteGuideTable(Method):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def ppf(self, u) -> Any: ...

class Method:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def rvs(self, size=..., random_state=...) -> Any: ...
    def set_random_state(self, random_state=...) -> Any: ...
    def __reduce__(self) -> Any: ...

class NumericalInverseHermite(Method):
    intervals: ClassVar[getset_descriptor] = ...
    midpoint_error: ClassVar[getset_descriptor] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _validate_args(self, *args, **kwargs) -> Any: ...
    def ppf(self, u) -> Any: ...
    def qrvs(self, size=..., d=..., qmc_engine=...) -> Any: ...
    def u_error(self, sample_size=...) -> Any: ...

class NumericalInversePolynomial(Method):
    intervals: ClassVar[getset_descriptor] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def cdf(self, x) -> Any: ...
    def ppf(self, u) -> Any: ...
    def qrvs(self, size=..., d=..., qmc_engine=...) -> Any: ...
    def u_error(self, sample_size=...) -> Any: ...

class SimpleRatioUniforms(Method):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class TransformedDensityRejection(Method):
    hat_area: ClassVar[getset_descriptor] = ...
    squeeze_area: ClassVar[getset_descriptor] = ...
    squeeze_hat_ratio: ClassVar[getset_descriptor] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @overload
    def ppf_hat(self, u) -> Any: ...
    @overload
    def ppf_hat(u) -> Any: ...

class UError(tuple):
    _asdict: ClassVar[function] = ...
    _field_defaults: ClassVar[dict] = ...
    _fields: ClassVar[tuple] = ...
    _replace: ClassVar[function] = ...
    max_error: ClassVar[_collections._tuplegetter] = ...
    mean_absolute_error: ClassVar[_collections._tuplegetter] = ...
    __getnewargs__: ClassVar[function] = ...
    __match_args__: ClassVar[tuple] = ...
    __slots__: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(cls, *args, **kwargs) -> Any: ...

class UNURANError(RuntimeError): ...

class _URNG:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class rv_frozen:
    __init__: ClassVar[function] = ...
    cdf: ClassVar[function] = ...
    entropy: ClassVar[function] = ...
    expect: ClassVar[function] = ...
    interval: ClassVar[function] = ...
    isf: ClassVar[function] = ...
    logcdf: ClassVar[function] = ...
    logsf: ClassVar[function] = ...
    mean: ClassVar[function] = ...
    median: ClassVar[function] = ...
    moment: ClassVar[function] = ...
    ppf: ClassVar[function] = ...
    rvs: ClassVar[function] = ...
    sf: ClassVar[function] = ...
    stats: ClassVar[function] = ...
    std: ClassVar[function] = ...
    support: ClassVar[function] = ...
    var: ClassVar[function] = ...
    random_state: Any

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def __pyx_unpickle__URNG(*args, **kwargs) -> Any: ...
def _validate_domain(*args, **kwargs) -> Any: ...
def _validate_qmc_input(*args, **kwargs) -> Any: ...
