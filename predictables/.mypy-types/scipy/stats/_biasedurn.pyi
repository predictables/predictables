from typing import Any, ClassVar

class _PyFishersNCHypergeometric:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def mean(self, *args, **kwargs) -> Any: ...
    def mode(self, *args, **kwargs) -> Any: ...
    def moments(self, *args, **kwargs) -> Any: ...
    def probability(self, *args, **kwargs) -> Any: ...
    def variance(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _PyStochasticLib3:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def FishersNCHyp(self, *args, **kwargs) -> Any: ...
    def Random(self, *args, **kwargs) -> Any: ...
    def SetAccuracy(self, *args, **kwargs) -> Any: ...
    def WalleniusNCHyp(self, *args, **kwargs) -> Any: ...
    def rvs_fisher(self, *args, **kwargs) -> Any: ...
    def rvs_wallenius(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _PyWalleniusNCHypergeometric:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def mean(self, *args, **kwargs) -> Any: ...
    def mode(self, *args, **kwargs) -> Any: ...
    def moments(self, *args, **kwargs) -> Any: ...
    def probability(self, *args, **kwargs) -> Any: ...
    def variance(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...
