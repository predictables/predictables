from typing import Any, NamedTuple

class Mean(NamedTuple):
    statistic: Any
    minmax: Any

class Variance(NamedTuple):
    statistic: Any
    minmax: Any

class Std_dev(NamedTuple):
    statistic: Any
    minmax: Any

def bayes_mvs(data, alpha: float = ...): ...
def mvsdist(data): ...
def kstat(data, n: int = ...): ...
def kstatvar(data, n: int = ...): ...
def probplot(
    x,
    sparams=...,
    dist: str = ...,
    fit: bool = ...,
    plot: Any | None = ...,
    rvalue: bool = ...,
): ...
def ppcc_max(x, brack=..., dist: str = ...): ...
def ppcc_plot(x, a, b, dist: str = ..., plot: Any | None = ..., N: int = ...): ...
def boxcox_llf(lmb, data): ...
def boxcox(
    x, lmbda: Any | None = ..., alpha: Any | None = ..., optimizer: Any | None = ...
): ...
def boxcox_normmax(
    x, brack: Any | None = ..., method: str = ..., optimizer: Any | None = ...
): ...
def boxcox_normplot(x, la, lb, plot: Any | None = ..., N: int = ...): ...
def yeojohnson(x, lmbda: Any | None = ...): ...
def yeojohnson_llf(lmb, data): ...
def yeojohnson_normmax(x, brack=...): ...
def yeojohnson_normplot(x, la, lb, plot: Any | None = ..., N: int = ...): ...

class ShapiroResult(NamedTuple):
    statistic: Any
    pvalue: Any

def shapiro(x): ...
def anderson(x, dist: str = ...): ...
def anderson_ksamp(samples, midrank: bool = ...): ...

class AnsariResult(NamedTuple):
    statistic: Any
    pvalue: Any

class _ABW:
    m: Any
    n: Any
    astart: Any
    total: Any
    freqs: Any
    def __init__(self) -> None: ...
    def pmf(self, k, n, m): ...
    def cdf(self, k, n, m): ...
    def sf(self, k, n, m): ...

def ansari(x, y, alternative: str = ...): ...

class BartlettResult(NamedTuple):
    statistic: Any
    pvalue: Any

def bartlett(*samples): ...

class LeveneResult(NamedTuple):
    statistic: Any
    pvalue: Any

def levene(*samples, center: str = ..., proportiontocut: float = ...): ...
def binom_test(x, n: Any | None = ..., p: float = ..., alternative: str = ...): ...

class FlignerResult(NamedTuple):
    statistic: Any
    pvalue: Any

def fligner(*samples, center: str = ..., proportiontocut: float = ...): ...
def mood(x, y, axis: int = ..., alternative: str = ...): ...
def wilcoxon(
    x,
    y: Any | None = ...,
    zero_method: str = ...,
    correction: bool = ...,
    alternative: str = ...,
    method: str = ...,
): ...
def median_test(
    *samples,
    ties: str = ...,
    correction: bool = ...,
    lambda_: int = ...,
    nan_policy: str = ...
): ...
def circmean(
    samples, high=..., low: int = ..., axis: Any | None = ..., nan_policy: str = ...
): ...
def circvar(
    samples, high=..., low: int = ..., axis: Any | None = ..., nan_policy: str = ...
): ...
def circstd(
    samples,
    high=...,
    low: int = ...,
    axis: Any | None = ...,
    nan_policy: str = ...,
    *,
    normalize: bool = ...
): ...

class DirectionalStats:
    mean_direction: Any
    mean_resultant_length: Any
    def __init__(self, mean_direction, mean_resultant_length) -> None: ...

def directional_stats(samples, *, axis: int = ..., normalize: bool = ...): ...
def false_discovery_control(ps, *, axis: int = ..., method: str = ...): ...
